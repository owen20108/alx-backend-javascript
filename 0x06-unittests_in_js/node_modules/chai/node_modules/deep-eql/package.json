{
  "name": "deep-eql",
  "version": "5.0.2",
  "description": "Improved deep equality testing for Node.js and the browser.",
  "keywords": [
    "chai util",
    "deep equal",
    "object equal",
    "testing"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:chaijs/deep-eql.git"
  },
  "license": "MIT",
  "author": {
    "name": "Jake Luer",
    "email": "jake@alogicalparadox.com"
  },
  "contributors": [
    {
      "name": "Keith Cirkel",
      "url": "https://github.com/keithamus"
    },
    {
      "name": "dougluce",
      "url": "https://github.com/dougluce"
    },
    {
      "name": "Lorenz Leutgeb",
      "url": "https://github.com/flowlo"
    }
  ],
  "type": "module",
  "main": "./index.js",
  "files": [
    "index.js",
    "deep-eql.js"
  ],
  "scripts": {
    "bench": "node bench",
    "lint": "eslint --ignore-path .gitignore .",
    "semantic-release": "semantic-release pre && semantic-release post",
    "pretest": "npm run lint",
    "test": "npm run test:node && npm run test:browser",
    "test:browser": "web-test-runner",
    "test:node": "istanbul cover _mocha",
    "upload-coverage": "lcov-result-merger 'coverage/**/lcov.info' | coveralls; exit 0",
    "watch": "web-test-runner --watch"
  },
  "eslintConfig": {
    "extends": [
      "strict/es5"
    ],
    "rules": {
      "complexity": 0,
      "no-underscore-dangle": 0,
      "no-use-before-define": 0,
      "spaced-comment": 0
    },
    "parserOptions": {
      "sourceType": "module",
      "ecmaVersion": 2015
    }
  },
  "devDependencies": {
    "@js-temporal/polyfill": "^0.4.3",
    "@rollup/plugin-commonjs": "^24.1.0",
    "@web/test-runner": "^0.16.1",
    "benchmark": "^2.1.0",
    "coveralls": "^3.1.1",
    "eslint": "^7.32.0",
    "eslint-config-strict": "^14.0.1",
    "eslint-plugin-filenames": "^1.3.2",
    "istanbul": "^0.4.2",
    "kewlr": "^0.4.1",
    "lcov-result-merger": "^1.0.2",
    "lodash.isequal": "^4.4.0",
    "mocha": "^9.1.1",
    "simple-assert": "^2.0.0"
  },
  "engines": {
    "node": ">=6"
  },
  "readme": "<h1 align=center>\n  <a href=\"http://chaijs.com\" title=\"Chai Documentation\">\n    <img alt=\"deep-eql\" src=\"https://raw.githubusercontent.com/chaijs/deep-eql/main/deep-eql-logo.svg\"/>\n  </a>\n</h1>\n\n<p align=center>\n  Improved deep equality testing for <a href=\"http://nodejs.org/\">node</a> and the browser.\n</p>\n\n<p align=center>\n  <a href=\"https://github.com/chaijs/deep-eql/actions\">\n    <img\n      alt=\"build:?\"\n      src=\"https://github.com/chaijs/deep-eql/workflows/Build/badge.svg\"\n    />\n  </a><a href=\"https://coveralls.io/r/chaijs/deep-eql\">\n    <img\n      alt=\"coverage:?\"\n      src=\"https://img.shields.io/coveralls/chaijs/deep-eql/master.svg?style=flat-square\"\n    />\n  </a><a href=\"https://www.npmjs.com/packages/deep-eql\">\n    <img\n      alt=\"dependencies:?\"\n      src=\"https://img.shields.io/npm/dm/deep-eql.svg?style=flat-square\"\n    />\n  </a><a href=\"\">\n    <img\n      alt=\"devDependencies:?\"\n      src=\"https://img.shields.io/david/chaijs/deep-eql.svg?style=flat-square\"\n    />\n  </a>\n  <br>\n  <a href=\"https://chai-slack.herokuapp.com/\">\n    <img\n      alt=\"Join the Slack chat\"\n      src=\"https://img.shields.io/badge/slack-join%20chat-E2206F.svg?style=flat-square\"\n    />\n  </a>\n  <a href=\"https://gitter.im/chaijs/deep-eql\">\n    <img\n      alt=\"Join the Gitter chat\"\n      src=\"https://img.shields.io/badge/gitter-join%20chat-D0104D.svg?style=flat-square\"\n    />\n  </a>\n</p>\n\n## What is Deep-Eql?\n\nDeep Eql is a module which you can use to determine if two objects are \"deeply\" equal - that is, rather than having referential equality (`a === b`), this module checks an object's keys recursively, until it finds primitives to check for referential equality. For more on equality in JavaScript, read [the comparison operators article on mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators).\n\nAs an example, take the following:\n\n```js\n1 === 1 // These are primitives, they hold the same reference - they are strictly equal\n1 == '1' // These are two different primitives, through type coercion they hold the same value - they are loosely equal\n{ a: 1 } !== { a: 1 } // These are two different objects, they hold different references and so are not strictly equal - even though they hold the same values inside\n{ a: 1 } != { a: 1 } // They have the same type, meaning loose equality performs the same check as strict equality - they are still not equal.\n\nvar deepEql = require(\"deep-eql\");\ndeepEql({ a: 1 }, { a: 1 }) === true // deepEql can determine that they share the same keys and those keys share the same values, therefore they are deeply equal!\n```\n\n## Installation\n\n### Node.js\n\n`deep-eql` is available on [npm](http://npmjs.org).\n\n    $ npm install deep-eql\n\n## Usage\n\nThe primary export of `deep-eql` is function that can be given two objects to compare. It will always return a boolean which can be used to determine if two objects are deeply equal.\n\n### Rules\n\n- Strict equality for non-traversable nodes according to [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is):\n  - `eql(NaN, NaN).should.be.true;`\n  - `eql(-0, +0).should.be.false;`\n- All own and inherited enumerable properties are considered:\n  - `eql(Object.create({ foo: { a: 1 } }), Object.create({ foo: { a: 1 } })).should.be.true;`\n  - `eql(Object.create({ foo: { a: 1 } }), Object.create({ foo: { a: 2 } })).should.be.false;`\n- When comparing `Error` objects, only `name`, `message`, and `code` properties are considered, regardless of enumerability:\n  - `eql(Error('foo'), Error('foo')).should.be.true;`\n  - `eql(Error('foo'), Error('bar')).should.be.false;`\n  - `eql(Error('foo'), TypeError('foo')).should.be.false;`\n  - `eql(Object.assign(Error('foo'), { code: 42 }), Object.assign(Error('foo'), { code: 42 })).should.be.true;`\n  - `eql(Object.assign(Error('foo'), { code: 42 }), Object.assign(Error('foo'), { code: 13 })).should.be.false;`\n  - `eql(Object.assign(Error('foo'), { otherProp: 42 }), Object.assign(Error('foo'), { otherProp: 13 })).should.be.true;`\n- Arguments are not Arrays:\n  - `eql([], arguments).should.be.false;`\n  - `eql([], Array.prototype.slice.call(arguments)).should.be.true;`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chaijs/deep-eql/issues"
  },
  "_id": "deep-eql@5.0.2",
  "dist": {
    "shasum": "0616750ff483985fe96a5c5640b621ce0d080fb8"
  },
  "_from": "deep-eql@^5.0.1",
  "_resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz"
}
